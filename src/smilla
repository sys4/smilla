#!/usr/bin/python
# -*- encoding: utf-8 -*-

"""
smilla is a Milter. It encrypts messages to recipients, who publish their
Key in DNS.
Copyright (C) 2015, sys4 AG

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

# Thanks for parts from openpgp-milter found on Github!

__author__ = "Christian Roessner <c@roessner.co>"
__version__ = "0.1.1"
__copyright_ = "AGPL"

import os
import sys
import email
import unbound
import ConfigParser
import pwd
import grp
import signal
import Milter
import argparse
import pyinotify

from threading import Thread, Lock
from syslog import syslog, openlog, LOG_PID, LOG_NOTICE, LOG_ERR, LOG_MAIL
from decorator import decorator
from ConfigParser import NoOptionError, NoSectionError
from cStringIO import StringIO
from hashlib import sha256
from M2Crypto import BIO, SMIME, X509
from datetime import tzinfo, timedelta, datetime
from email.utils import parseaddr
from email.parser import Parser

try:
    import setproctitle
    setproctitle.setproctitle("smilla")
except:
    pass


DEBUG = False
DRY_RUN = False


NAME = "smilla"
ANCHOR = "/etc/unbound/dnssec/root-anchors.txt"
CFG_FILE = "/etc/%s.cfg" % NAME
SMIMEA = 53
CIPHER = "aes_256_cbc"
ZERO = timedelta(0)


lock = Lock()
cfg = None  # global configuration
ctx = unbound.ub_ctx()
ctx.resolvconf('/etc/resolv.conf')


# This decorator is used for the config parser
@decorator
def nonetype(f, *p, **kw):
    try:
        result = f(*p, **kw)
    except TypeError:
        result = None
    except NoOptionError:
        result = None
    except NoSectionError:
        result = None
    return result


class Config(ConfigParser.RawConfigParser):
    """
    Read configuration file /etc/smilla.cfg. Set defaults for unset or empty
    parameters
    """
    def __init__(self, args):
        ConfigParser.RawConfigParser.__init__(self)

        self.__user = None
        self.__group = None
        self.__bind_address = None
        self.__bind_address6 = None
        self.__port = None
        self.__pidfile = None
        self.__trust_anchor = None
        self.__milter_timeout = None
        self.__args = args

        self._read_config()

    @nonetype
    def _get_section_str(self, sec, val):
        return self.get(sec, val)

    @nonetype
    def _get_section_int(self, sec, val):
        return self.getint(sec, val)

    def _read_config(self):
        cfg_file_ok = True
        if self.__args.config is not None:
            config = self.__args.config
        else:
            config = CFG_FILE
        if os.path.exists(config):
            self.read(CFG_FILE)
        else:
            print >> sys.stderr, ("No configuration file available")
            cfg_file_ok = False

        # 1. Read configuration parameters
        if cfg_file_ok:
            self.__user = self._get_section_str("config", "user")
            self.__group = self._get_section_str("config", "group")
            self.__bind_address = self._get_section_str("config",
                                                        "bind_address")
            self.__bind_address6 = self._get_section_str("config",
                                                         "bind_address6")
            self.__port = self._get_section_int("config", "port")
            self.__pidfile = self._get_section_str("config", "pidfile")
            self.__trust_anchor = self._get_section_str("config",
                                                        "trust_anchor")
            self.__milter_timeout = self._get_section_int("config",
                                                          "milter_timeout")

        # 2. Set defaults for unset or empty parameters
        if self.__user in ("", None):
            if self.__args.user is not None:
                self.__user = self.__args.user
            else:
                self.__user = "milter"
        if self.__group in ("", None):
            if self.__args.group is not None:
                self.__group = self.__args.group
            else:
                self.__group = "milter"
        if self.__port in ("", None):
            if self.__args.port is not None:
                self.__port = self.__args.port
            else:
                self.__port = 8894
        if self.__bind_address in ("", None) and \
                        self.__bind_address6 in ("", None):
            if self.__args.bind_address is not None:
                self.__bind_address = self.__args.bind_address
            else:
                self.__bind_address = "127.0.0.1"
        if self.__bind_address is not None and \
                        self.__bind_address6 is not None:
            print >> sys.stderr, "Do not specify bind_address and " \
                                 "bind_address6 at the same time! Aborting"
            sys.exit(os.EX_CONFIG)
        if self.__bind_address is not None:
            self.__socketname = "inet:%s@%s" % (self.__port,
                                                self.__bind_address)
        else:
            if self.__args.bind_address6 is not None:
                self.__bind_address6 = self.__args.bind_address6
            self.__socketname = "inet6:%s@[%s]" % (self.__port,
                                                self.__bind_address6)
        if self.__pidfile in ("", None):
            if self.__args.pid_file is not None:
                self.__pidfile = self.__args.pid_file
            else:
                self.__pidfile = "/run/%s/%s.pid" % (NAME, NAME)
        if self.__trust_anchor in ("", None):
            if self.__args.trust_anchor is not None:
                self.__trust_anchor = self.__args.trust_anchor
            else:
                self.__trust_anchor = ANCHOR
        if self.__milter_timeout in ("", None):
            if self.__args.milter_timeout is not None:
                self.__milter_timeout = self.__args.milter_timeout
            else:
                self.__milter_timeout = 300

    @property
    def user(self):
        return self.__user

    @property
    def group(self):
        return self.__group

    @property
    def bind_address(self):
        return self.__bind_address

    @property
    def bind_address6(self):
        return self.__bind_address6

    @property
    def port(self):
        return self.__port

    @property
    def pidfile(self):
        return self.__pidfile

    @property
    def trust_anchor(self):
        return self.__trust_anchor

    @property
    def milter_timeout(self):
        return self.__milter_timeout

    @property
    def socketname(self):
        return self.__socketname


class UTC(tzinfo):
    """
    Helper class for x509 not-before/after dates
    """
    def utcoffset(self, dt):
        return ZERO

    def tzname(self, dt):
        return "UTC"

    def dst(self, dt):
        return ZERO


class Smilla(Milter.Base):
    """
    Main milter class. All callbacks are handled here.
    """
    def __init__(self):
        self.__id = Milter.uniqueID()
        self.__ipname = None
        self.__ip = None
        self.__port = None

    @Milter.noreply
    def connect(self, ipname, family, hostaddr):
        self.__ip = hostaddr[0]
        self.__ipname = ipname
        self.__port = hostaddr[1]

        #syslog("connect from %s[%s]:%s" % (self.__ipname,
        #                                   self.__ip,
        #                                   self.__port))

        return Milter.CONTINUE

    @Milter.noreply
    def envfrom(self, mailfrom, *mstr):
        self.__mailfrom = mailfrom
        # Clear data structures for new mail
        self.__msg_body = list()
        self.__recipients = list()
        self.__fp = StringIO()

        return Milter.CONTINUE

    @Milter.noreply
    def envrcpt(self, to, *mstr):
        rcptinfo = to, Milter.dictfromlist(mstr)
        rcptto = rcptinfo[0]
        self.__recipients.append(parseaddr(rcptto)[1])

        return Milter.CONTINUE

    @Milter.noreply
    def header(self, name, hval):
        self.__fp.write('%s: %s\r\n' % (name, hval))

        return Milter.CONTINUE

    @Milter.noreply
    def body(self, chunk):
        self.__msg_body.append(chunk)

        return Milter.CONTINUE

    def eom(self):
        global lock
        global ctx  # unbound

        self.__fp.seek(0)

        # header (as message)
        msg = email.message_from_file(self.__fp)
        # body
        msg_body = "".join(self.__msg_body)

        self.__fp.close()
        del self.__fp

        # Sanity check
        if not len(self.__recipients) > 0:
            syslog("%s: No recipients mail_from=%s" % (
                self.getsymval("i"), self.__mailfrom))
            return Milter.CONTINUE


        # Protect against super-encryption
        if '-----BEGIN PGP MESSAGE-----' in msg_body:
            syslog('%s: Message already encrypted with PGP - letting it go '
                   'unmodified' % self.getsymval("i"))
            return Milter.CONTINUE

        if "Content-Type" in msg:
            # Protect against super-encryption
            if "pkcs7-mime" in msg["Content-Type"] and \
                    "enveloped-data" in msg["Content-Type"]:
                syslog('%s: Message already encrypted with S/MIME - letting it '
                       'go unmodified' % self.getsymval("i"))

                return Milter.CONTINUE

            elif "application/octet-stream" in msg["Content-Type"] and \
               ".p7m" in msg["Content-Type"]:
                syslog('%s: Message already encrypted with S/MIME - letting it '
                       'go unmodified' % self.getsymval("i"))

                return Milter.CONTINUE

        cert_stack = X509.X509_Stack()

        for recipient in iter(self.__recipients):
            # Get DER certificate for each user. If we fail, we pass the mail
            # unencrypted
            try:
                username, domainname = recipient.split('@')
            except ValueError:  # null mailer <> or bad address
                syslog("%s: Skipping recipient address <%s>" % (
                           self.getsymval("i"), recipient))
                return Milter.CONTINUE

            # Does not match current expermintal RFC draft, so we comment it out
            # username = username.lower()

            rfcname = sha256(username).hexdigest()[:28*2]  # only 28 octets
            query_name = '%s._smimecert.%s' % (rfcname, domainname)
            #syslog("%s: DNS query for '%s', %s" % (
            #    self.getsymval("i"), recipient, query_name))

            with lock:
                status, result = ctx.resolve(query_name,
                                             SMIMEA,
                                             unbound.RR_CLASS_IN)

            if status != 0:
                syslog(LOG_ERR,
                       "%s: unbound SMIMEA lookup for '%s' "
                       "returned non-zero status - deferring"
                        % (self.getsymval("i"), recipient))
                return Milter.TEMPFAIL
            if result.rcode_str == 'serv fail':
                syslog(LOG_ERR,
                       "%s: unbound SMIMEA lookup for '%s' "
                       "returned SERVFAIL - deferring"
                        % (self.getsymval("i"), recipient))
                return Milter.TEMPFAIL
            if result.bogus:
                syslog(LOG_ERR,
                       "%s: unbound SMIMEA lookup for '%s' "
                       "returned with INVALID DNSSEC data - deferring"
                       % (self.getsymval("i"), recipient))
                return Milter.TEMPFAIL
            if not result.secure:
                #syslog(LOG_ERR,
                #       "%s: unbound SMIMEA lookup for '%s' "
                #       "ignored as the domain is not signed with DNSSEC "
                #       "- letting go plaintext"
                #        % (self.getsymval("i"), recipient))
                return Milter.CONTINUE
            if not result.havedata:
                #syslog(LOG_ERR,
                #       "%s: unbound SMIMEA lookup for '%s' "
                #       "succeeded but no SMIME cert published "
                #       "- letting go plaintext"
                #       % (self.getsymval("i"), recipient))
                return Milter.CONTINUE

            cert_loaded = False
            for dns_result in iter(result.data.raw):
                if cert_loaded:
                    break

                f = StringIO(dns_result)

                cert_usage_field = ord(f.read(1))
                selector = ord(f.read(1))
                matching_type = ord(f.read(1))

                if cert_usage_field == 0x01 or \
                   cert_usage_field == 0x03:
                    if selector == 0x00 and \
                       matching_type == 0x00:
                        der = f.read()
                        # Load each recipient certificate on the stack
                        try:
                            x509 = X509.load_cert_der_string(der)

                            # Check date
                            before = x509.get_not_before().get_datetime()
                            after = x509.get_not_after().get_datetime()
                            utc = UTC()
                            now = datetime.now(utc)
                            if now < before or now > after:
                                syslog("%s: x509 date validity failed"
                                       % self.getsymval("i"))
                                continue

                            # Check x509v3 extensions
                            x509_ext_num = x509.get_ext_count()
                            for x509_index in xrange(x509_ext_num):
                                x509_ext = x509.get_ext_at(x509_index)
                                x509_ext_name = x509_ext.get_name().lower()
                                if x509_ext_name == "keyusage":
                                    x509_ext_values = x509_ext.get_value()\
                                        .lower()\
                                        .split(",")
                                    x509_ext_values = [e.strip() for e in iter(
                                        x509_ext_values)]
                                    key_usage = False
                                    for usage in iter(x509_ext_values):
                                        if usage == "data encipherment" or \
                                           usage == "key encipherment" or \
                                           usage == "key agreement":
                                            cert_stack.push(x509)
                                            key_usage = True
                                            cert_loaded = True
                                    if not key_usage:
                                        syslog("%s: x509 keyUsage failed"
                                               % self.getsymval("i"))
                        except X509.X509Error:
                            syslog("%s: Unable to load x509 certificate"
                                   % self.getsymval("i"))
                    else:
                        syslog("%s: Wrong selector or matching field"
                               % self.getsymval("i"))
                else:
                    syslog("%s: Wrong certificate usage field"
                           % self.getsymval("i"))

            if not cert_loaded:
                return Milter.CONTINUE

        smime = SMIME.SMIME()
        smime.set_x509_stack(cert_stack)
        smime.set_cipher(SMIME.Cipher(CIPHER))
        msg_buf = BIO.MemoryBuffer()

        if "Content-Type" in msg:
            prefix = "Content-Type: %s\n" % msg["Content-Type"]
        else:
            # We need to set a default Content-Type for the resulting PKCS#7
            prefix = "Content-Type: text/plain\n"

        if "Content-Disposition" in msg:
            prefix += "Content-Disposition: %s\n" % msg[
                "Content-Disposition"]

        if "Content-Transfer-Encoding" in msg:
            prefix += "Content-Transfer-Encoding: %s\n" % msg[
                "Content-Transfer-Encoding"]

        prefix += "\n"
        # Headers and body for PKCS#7
        msg_buf.write(prefix + msg_body)
        p7 = smime.encrypt(msg_buf)

        out = BIO.MemoryBuffer()
        smime.write(out, p7)
        out.close()

        if DRY_RUN:
            syslog("%s: In testing mode" % self.getsymval("i"))
            return Milter.CONTINUE

        syslog("%s: Message has been encrypted" % self.getsymval("i"))
        self.addheader('X-SMIMEA', 'Message has been encrypted', 1)

        # "out" contains header and body. Need to split things, because we
        # are going to replace the message body
        newmail = Parser().parsestr(out.read())
        for header in newmail.keys():
            for msg_header in msg.keys():
                if header.lower() == msg_header.lower():
                    self.chgheader(msg_header, 1, None)
        self.addheader("MIME-Version", newmail["MIME-Version"])
        self.addheader("Content-Type", newmail["Content-Type"])
        self.addheader("Content-Disposition", newmail["Content-Disposition"])
        self.addheader("Content-Transfer-Encoding", newmail[
            "Content-Transfer-Encoding"])

        self.replacebody(newmail.get_payload())

        return Milter.CONTINUE

    def close(self):
        #syslog("disconnect from %s[%s]:%s" % (self.__ipname,
        #                                      self.__ip,
        #                                      self.__port))

        return Milter.CONTINUE

    def abort(self):
        return Milter.CONTINUE


class ProcessTransientFile(pyinotify.ProcessEvent):
    """Watch for changed unbound trust anchor file"""

    def process_IN_MODIFY(self, event):
        # We have explicitely registered for this kind of event.
        global cfg
        global ctx

        ctx.add_ta_file(cfg.trust_anchor)
        syslog("unbound trust anchor file changed: %s" % event.pathname)

    def process_default(self, event):
        pass


def unbound_watcher():
    wm = pyinotify.WatchManager()
    notifier = pyinotify.Notifier(wm)

    wm.watch_transient_file(cfg.trust_anchor,
                            pyinotify.IN_MODIFY,
                            ProcessTransientFile)

    notifier.loop()


def runner():
    """Starts the milter loop"""

    Milter.factory = Smilla

    flags = Milter.CHGBODY + Milter.CHGHDRS + Milter.ADDHDRS
    Milter.set_flags(flags)

    Milter.runmilter(NAME, cfg.socketname, timeout=cfg.milter_timeout)


def main():
    global cfg
    global ctx

    parser = argparse.ArgumentParser(epilog="Smilla email encryption")

    parser.add_argument("--config",
                        "-c",
                        default=None,
                        type=str,
                        help="Load configuration options from this file")
    parser.add_argument("--user",
                        "-u",
                        default=None,
                        type=str,
                        help="Run the milter as this user")
    parser.add_argument("--group",
                        "-g",
                        default=None,
                        type=str,
                        help="Run the milter as this group")
    parser.add_argument("--bind-address",
                        "-4",
                        default=None,
                        type=str,
                        help="Bind the milter to the given IPv4 address")
    parser.add_argument("--bind-address6",
                        "-6",
                        default=None,
                        type=str,
                        help="Bind the milter to the given IPv6 address")
    parser.add_argument("--port",
                        "-p",
                        default=None,
                        type=int,
                        help="TCP/IP port to listen for incoming requests")
    parser.add_argument("--pid-file",
                        "-f",
                        default=None,
                        type=str,
                        help="PID file")
    parser.add_argument("--trust-anchor",
                        "-a",
                        default=None,
                        type=str,
                        help="DNSSEC trust anchor file")
    parser.add_argument("--milter-timeout",
                        "-t",
                        default=None,
                        type=int,
                        help="Milter timeout in seconds")

    args = parser.parse_args()

    if args.bind_address is not None and args.bind_address6 is not None:
        print "Do not specify bind_address and bind_address6 at the same time!"
        sys.exit(os.EX_USAGE)

    cfg = Config(args)

    try:
        if os.path.isfile(cfg.trust_anchor):
            ctx.add_ta_file(cfg.trust_anchor)
    except:
        print "Can not read trust anchor %s! Aborting" % cfg.trust_anchor
        sys.exit(os.EX_USAGE)

    openlog(NAME, LOG_PID, LOG_MAIL)

    uid = pwd.getpwnam(cfg.user)[2]
    gid = grp.getgrnam(cfg.group)[2]

    try:
        os.setgid(gid)
    except OSError, e:
        print >> sys.stderr, ('Could not set effective group id: %s' % str(e))
        sys.exit(os.EX_OSERR)
    try:
        os.setuid(uid)
    except OSError, e:
        print >> sys.stderr, ('Could not set effective user id: %s' % str(e))
        sys.exit(os.EX_OSERR)

    if not DEBUG:
        try:
            pid = os.fork()
        except OSError, e:
            print >> sys.stderr, ("First fork failed: (%d) %s"
                                  % (e.errno, e.strerror))
            sys.exit(os.EX_OSERR)
        if pid == 0:
            os.setsid()
            try:
                pid = os.fork()
            except OSError, e:
                print >> sys.stderr, ("Second fork failed: (%d) %s"
                                      % (e.errno, e.strerror))
                sys.exit(os.EX_OSERR)
            if pid == 0:
                os.chdir("/")
                os.umask(0)
            else:
                os._exit(0)
        else:
            os._exit(0)

        sys.stdin = file(os.devnull, "r")
        sys.stdout = file(os.devnull, "w")
        sys.stderr = file(os.devnull, "w")

    try:
        if cfg.pidfile is not None:
            with open(cfg.pidfile, "w") as fd:
                fd.write(str(os.getpid()))
    except IOError, e:
        syslog(LOG_ERR, "Can not create pid file: %s" % str(e))

    def finish(signum, frame):
        syslog(LOG_NOTICE,
               "%s-%s milter shutdown. Caught signal %d"
               % (NAME, __version__, signum))

    signal.signal(signal.SIGINT, finish)
    signal.signal(signal.SIGQUIT, finish)
    signal.signal(signal.SIGTERM, finish)

    signal.signal(signal.SIGHUP, signal.SIG_IGN)
    signal.signal(signal.SIGUSR1, signal.SIG_IGN)
    signal.siginterrupt(signal.SIGHUP, False)
    signal.siginterrupt(signal.SIGUSR1, False)

    syslog(LOG_NOTICE, "%s-%s milter startup" % (NAME, __version__))

    unbound_watcher_t = Thread(target=unbound_watcher)
    unbound_watcher_t.daemon = True
    unbound_watcher_t.start()

    milter_t = Thread(target=runner)
    milter_t.daemon = True
    milter_t.start()

    signal.pause()

    try:
        if cfg.pidfile is not None and os.path.exists(cfg.pidfile):
            os.unlink(cfg.pidfile)
    except IOError, e:
        syslog(LOG_ERR, "Can not remove pid file: %s" % str(e))
        sys.exit(os.EX_OSERR)

    sys.exit(os.EX_OK)


if __name__ == "__main__":
    main()
    sys.exit(os.EX_OK)
